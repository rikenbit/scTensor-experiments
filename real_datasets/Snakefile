from snakemake.utils import min_version

#
# Setting
#
container: "docker://koki/sctensor-experiments:20220208"

SAMPLES = ["Human_Germline_Female",
    "Human_FetalKidney",
    "Human_HeadandNeckCancer",
    "Mouse_Uterus",
    "Mouse_VisualCortex"]

METHODS = [
    "labelpermutation_tensor",
    "labelpermutation",
    "labelpermutation2_tensor",
    "labelpermutation2",
    "halpern_tensor",
    "halpern",
    "cabelloaguilar_tensor",
    "cabelloaguilar",
    "previous_sctensor",
    "sctensor"]

BINMETHODS = [
    "labelpermutation",
    "labelpermutation2",
    "halpern",
    "cabelloaguilar",
    "previous_sctensor",
    "sctensor"]

IDS = [str(x) for x in list(range(1, 6))]

rule real_all:
    input:
        expand("plot/groundtruth/{sample}.png",
            sample=SAMPLES),
        expand('plot/ROC/{method}/{sample}.png',
            method=METHODS, sample=SAMPLES),
        expand('plot/PRC/{method}/{sample}.png',
            method=METHODS, sample=SAMPLES),
        expand('plot/{types}.png',
            types=['AUC', 'AUCPR', 'F', 'MCC',
            'FPR', 'FNR', 'PR', 'Time', 'Memory']),
        expand('plot/TR.png'),
        expand('plot/L-R/CHECK_{binmethod}_{sample}',
            binmethod=BINMETHODS, sample=SAMPLES),
        expand('output/report/{sample}/index.html',
            sample=SAMPLES)

rule preprocess:
    output:
        'data/{sample}/{sample}.RData'
    wildcard_constraints:
        sample='|'.join([re.escape(x) for x in SAMPLES])
    benchmark:
        'benchmarks/preprocess_{sample}.txt'
    log:
        'logs/preprocess_{sample}.log'
    shell:
        'src/preprocess_{wildcards.sample}.sh {output} > {log}'

rule groundtruth:
    input:
        'data/{sample}/{sample}.RData'
    output:
        "data/groundtruth/{sample}.RData"
    wildcard_constraints:
        sample='|'.join([re.escape(x) for x in SAMPLES])
    benchmark:
        'benchmarks/groundtruth_{sample}.txt'
    log:
        'logs/groundtruth_{sample}.log'
    shell:
        'src/groundtruth.sh {output} > {log}'

rule plot_groundtruth:
    input:
        "data/groundtruth/{sample}.RData"
    output:
        "plot/groundtruth/{sample}.png"
    wildcard_constraints:
        sample='|'.join([re.escape(x) for x in SAMPLES])
    benchmark:
        'benchmarks/plot_groundtruth_{sample}.txt'
    log:
        'logs/plot_groundtruth_{sample}.log'
    shell:
        'src/plot_groundtruth.sh {wildcards.sample} {output} > {log}'

rule real_labelpermutaion:
    input:
        'data/{sample}/{sample}.RData'
    output:
        out1='output/labelpermutation_tensor/{sample}.RData',
        out2='output/labelpermutation/{sample}.RData'
    resources:
        mem_gb=50
    wildcard_constraints:
        sample='|'.join([re.escape(x) for x in SAMPLES])
    benchmark:
        'benchmarks/labelpermutation_{sample}.txt'
    log:
        'logs/labelpermutation_{sample}.log'
    shell:
        'src/labelpermutation.sh {input} {output.out1} {output.out2} > {log}'

rule real_labelpermutaion2:
    input:
        'data/{sample}/{sample}.RData',
    output:
        out1='output/labelpermutation2_tensor/{sample}.RData',
        out2='output/labelpermutation2/{sample}.RData'
    resources:
        mem_gb=50
    wildcard_constraints:
        sample='|'.join([re.escape(x) for x in SAMPLES])
    benchmark:
        'benchmarks/labelpermutation2_{sample}.txt'
    log:
        'logs/labelpermutation2_{sample}.log'
    shell:
        'src/labelpermutation2.sh {input} {output.out1} {output.out2} > {log}'

rule real_halpern:
    input:
        'data/{sample}/{sample}.RData',
    output:
        out1='output/halpern_tensor/{sample}.RData',
        out2='output/halpern/{sample}.RData'
    resources:
        mem_gb=50
    wildcard_constraints:
        sample='|'.join([re.escape(x) for x in SAMPLES])
    benchmark:
        'benchmarks/halpern_{sample}.txt'
    log:
        'logs/halpern_{sample}.log'
    shell:
        'src/halpern.sh {input} {output.out1} {output.out2} > {log}'

rule real_cabelloaguilar:
    input:
        'data/{sample}/{sample}.RData',
    output:
        out1='output/cabelloaguilar_tensor/{sample}.RData',
        out2='output/cabelloaguilar/{sample}.RData'
    resources:
        mem_gb=50
    wildcard_constraints:
        sample='|'.join([re.escape(x) for x in SAMPLES])
    benchmark:
        'benchmarks/cabelloaguilar_{sample}.txt'
    log:
        'logs/cabelloaguilar_{sample}.log'
    shell:
        'src/cabelloaguilar.sh {input} {output.out1} {output.out2} > {log}'

rule real_previous_sctensor:
    input:
        'data/{sample}/{sample}.RData',
    output:
        'output/previous_sctensor/{id}/{sample}.RData'
    resources:
        mem_gb=50
    wildcard_constraints:
        id='|'.join([re.escape(x) for x in IDS]),
        sample='|'.join([re.escape(x) for x in SAMPLES])
    benchmark:
        'benchmarks/previous_sctensor_{id}_{sample}.txt'
    log:
        'logs/previous_sctensor_{id}_{sample}.log'
    shell:
        'src/previous_sctensor.sh {input} {output} > {log}'

rule real_sctensor:
    input:
        'data/{sample}/{sample}.RData',
    output:
        'output/sctensor/{id}/{sample}.RData'
    resources:
        mem_gb=50
    wildcard_constraints:
        id='|'.join([re.escape(x) for x in IDS]),
        sample='|'.join([re.escape(x) for x in SAMPLES])
    benchmark:
        'benchmarks/sctensor_{id}_{sample}.txt'
    log:
        'logs/sctensor_{id}_{sample}.log'
    shell:
        'src/sctensor.sh {input} {output} > {log}'

def aggregate_previous_sctensor_results(sample):
    out = []
    for j in range(len(IDS)):
        out.append('output/previous_sctensor/' + str(j+1) + '/{sample}.RData')
    return(out)

def aggregate_sctensor_results(sample):
    out = []
    for j in range(len(IDS)):
        out.append('output/sctensor/' + str(j+1) + '/{sample}.RData')
    return(out)

rule real_aggregate_previous_sctensor:
    input:
        aggregate_previous_sctensor_results
    output:
        'output/previous_sctensor/{sample}.RData'
    resources:
        mem_gb=50
    wildcard_constraints:
        sample='|'.join([re.escape(x) for x in SAMPLES])
    benchmark:
        'benchmarks/aggregate_previous_sctensor_{sample}.txt'
    log:
        'logs/aggregate_previous_sctensor_{sample}.log'
    shell:
        'src/aggregate_previous_sctensor.sh {input} {output} > {log}'

rule real_aggregate_sctensor:
    input:
        aggregate_sctensor_results
    output:
        'output/sctensor/{sample}.RData'
    resources:
        mem_gb=50
    wildcard_constraints:
        sample='|'.join([re.escape(x) for x in SAMPLES])
    benchmark:
        'benchmarks/aggregate_sctensor_{sample}.txt'
    log:
        'logs/aggregate_sctensor_{sample}.log'
    shell:
        'src/aggregate_sctensor.sh {input} {output} > {log}'

rule real_roc_auc_bin_f:
    input:
        in1='output/{method}/{sample}.RData',
        in2='data/groundtruth/{sample}.RData'
    output:
        out1='output/{method}/ROC/{sample}.RData',
        out2='output/{method}/AUC/{sample}.RData',
        out3='output/{method}/BIN/{sample}.RData',
        out4='output/{method}/F/{sample}.RData',
        out5='output/{method}/PRC/{sample}.RData',
        out6='output/{method}/AUCPR/{sample}.RData',
        out7='output/{method}/MCC/{sample}.RData',
        out8='output/{method}/FPR/{sample}.RData',
        out9='output/{method}/FNR/{sample}.RData',
        out10='output/{method}/PR/{sample}.RData',
        out11='output/{method}/MaxPosition/{sample}.RData',
        out12='output/{method}/MaxPosition2/{sample}.RData',
        out13='output/{method}/Score/{sample}.RData'
    resources:
        mem_gb=500
    wildcard_constraints:
        method='|'.join([re.escape(x) for x in METHODS]),
        sample='|'.join([re.escape(x) for x in SAMPLES])
    benchmark:
        'benchmarks/roc_auc_bin_f_{method}_{sample}.txt'
    log:
        'logs/roc_auc_bin_f_{method}_{sample}.log'
    shell:
        'src/roc_auc_bin_f.sh {input} {output} > {log}'

rule real_plot_roc_auc_f:
    input:
        in1='output/{method}/ROC/{sample}.RData',
        in2='output/{method}/AUC/{sample}.RData',
        in3='output/{method}/F/{sample}.RData'
    output:
        'plot/ROC/{method}/{sample}.png'
    resources:
        mem_gb=50
    wildcard_constraints:
        method='|'.join([re.escape(x) for x in METHODS]),
        sample='|'.join([re.escape(x) for x in SAMPLES])
    benchmark:
        'benchmarks/plot_roc_auc_f_{method}_{sample}.txt'
    log:
        'logs/plot_roc_auc_f_{method}_{sample}.log'
    shell:
        'src/plot_roc_auc_f.sh {input} {output} > {log}'

rule real_plot_prc_aucpr_mcc:
    input:
        in1='data/groundtruth/{sample}.RData',
        in2='output/{method}/PRC/{sample}.RData',
        in3='output/{method}/AUCPR/{sample}.RData',
        in4='output/{method}/MCC/{sample}.RData'
    output:
        'plot/PRC/{method}/{sample}.png'
    resources:
        mem_gb=50
    wildcard_constraints:
        method='|'.join([re.escape(x) for x in METHODS]),
        sample='|'.join([re.escape(x) for x in SAMPLES])
    benchmark:
        'benchmarks/plot_prc_aucpr_mcc_{method}_{sample}.txt'
    log:
        'logs/plot_prc_aucpr_mcc_{method}_{sample}.log'
    shell:
        'src/plot_prc_aucpr_mcc.sh {input} {output} > {log}'

rule real_plot_auc:
    input:
        expand('output/{method}/AUC/{sample}.RData',
            method=METHODS, sample=SAMPLES)
    output:
        'plot/AUC.png'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/plot_auc.txt'
    log:
        'logs/plot_auc.log'
    shell:
        'src/plot_auc.sh {output} > {log}'

rule real_plot_aucpr:
    input:
        expand('output/{method}/AUCPR/{sample}.RData',
            method=METHODS, sample=SAMPLES)
    output:
        'plot/AUCPR.png'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/plot_aucpr.txt'
    log:
        'logs/plot_aucpr.log'
    shell:
        'src/plot_aucpr.sh {output} > {log}'

rule real_plot_f:
    input:
        expand('output/{binmethod}/F/{sample}.RData',
            binmethod=BINMETHODS, sample=SAMPLES)
    output:
        'plot/F.png'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/plot_f.txt'
    log:
        'logs/plot_f.log'
    shell:
        'src/plot_f.sh {output} > {log}'

rule real_plot_mcc:
    input:
        expand('output/{binmethod}/MCC/{sample}.RData',
            binmethod=BINMETHODS, sample=SAMPLES)
    output:
        'plot/MCC.png'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/plot_mcc.txt'
    log:
        'logs/plot_mcc.log'
    shell:
        'src/plot_mcc.sh {output} > {log}'

rule real_plot_fpr:
    input:
        expand('output/{binmethod}/FPR/{sample}.RData',
            binmethod=BINMETHODS, sample=SAMPLES)
    output:
        'plot/FPR.png'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/plot_fpr.txt'
    log:
        'logs/plot_fpr.log'
    shell:
        'src/plot_fpr.sh {output} > {log}'

rule real_plot_fnr:
    input:
        expand('output/{binmethod}/FNR/{sample}.RData',
            binmethod=BINMETHODS, sample=SAMPLES)
    output:
        'plot/FNR.png'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/plot_fnr.txt'
    log:
        'logs/plot_fnr.log'
    shell:
        'src/plot_fnr.sh {output} > {log}'

rule real_plot_pr:
    input:
        expand('output/{binmethod}/PR/{sample}.RData',
            binmethod=BINMETHODS, sample=SAMPLES)
    output:
        'plot/PR.png'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/plot_pr.txt'
    log:
        'logs/plot_pr.log'
    shell:
        'src/plot_pr.sh {output} > {log}'

rule real_plot_tr:
    input:
        expand("data/groundtruth/{sample}.RData",
            sample=SAMPLES)
    output:
        'plot/TR.png'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/plot_tr.txt'
    log:
        'logs/plot_tr.log'
    shell:
        'src/plot_tr.sh {output} > {log}'

rule real_plot_time:
    input:
        expand('output/{method}/{sample}.RData',
            method=METHODS, sample=SAMPLES)
    output:
        'plot/Time.png'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/plot_time.txt'
    log:
        'logs/plot_time.log'
    shell:
        'src/plot_time.sh {output} > {log}'

rule real_plot_memory:
    input:
        expand('output/{method}/{sample}.RData',
            method=METHODS, sample=SAMPLES)
    output:
        'plot/Memory.png'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/plot_memory.txt'
    log:
        'logs/plot_memory.log'
    shell:
        'src/plot_memory.sh {output} > {log}'

rule real_plot_lr:
    input:
        expand("data/groundtruth/{sample}.RData",
            sample=SAMPLES),
        expand('output/{binmethod}/MaxPosition/{sample}.RData',
            binmethod=BINMETHODS, sample=SAMPLES),
        expand('output/{binmethod}/MaxPosition2/{sample}.RData',
            binmethod=BINMETHODS, sample=SAMPLES),
        expand('output/{binmethod}/Score/{sample}.RData',
            binmethod=BINMETHODS, sample=SAMPLES)
    output:
        'plot/L-R/CHECK_{binmethod}_{sample}'
    resources:
        mem_gb=50
    wildcard_constraints:
        binmethod='|'.join([re.escape(x) for x in BINMETHODS])
    benchmark:
        'benchmarks/plot_L-R_{binmethod}_{sample}.txt'
    log:
        'logs/plot_L-R_{binmethod}_{sample}.log'
    shell:
        'src/plot_LR.sh {wildcards.binmethod} {wildcards.sample} {output} > {log}'

rule report:
    input:
        'data/{sample}/{sample}.RData',
        'output/sctensor/{sample}.RData'
    output:
        'output/report/{sample}/index.html'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/report_{sample}.txt'
    log:
        'logs/report_{sample}.log'
    shell:
        'src/report.sh {input} {output} > {log}'
